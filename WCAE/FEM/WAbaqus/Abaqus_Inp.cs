using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using WCAE.WFEM;

namespace WCAE.WFEM.WAbaqus
{
    public static class Abaqus_Inp
    {
        public static void Write_Serial(string Path, string Work_Name, ref FEM_Props FEM)
        {
            StreamWriter sw = new StreamWriter(Path + Work_Name + ".inp");
            Step1_WriteHead(Work_Name, ref sw);
            int[] ENs = Step2_WritePart(Path, Work_Name, ref sw, ref FEM);
            Step3_WriteAss(Work_Name, ref sw, ref ENs);
            Step4_WriteMat(ref sw, ref FEM);
            Step5_WriteIniPara(Work_Name, ref sw, ref FEM);
            Step6_WriteStep(Work_Name, ref sw, ref FEM);
            sw.Close();

            File.Delete(Path + Work_Name + ".e2");
            File.Delete(Path + Work_Name + ".e3");
            File.Delete(Path + Work_Name + ".e4");
            File.Delete(Path + Work_Name + ".em3");
            File.Delete(Path + Work_Name + ".em4");
        }

        #region "Step1 输出抬头"
        private static void Step1_WriteHead(string Work_Name, ref StreamWriter sw)
        {
            sw.WriteLine("*Heading");
            sw.WriteLine("** Job name: " + Work_Name + " Model name: " + Work_Name);
            sw.WriteLine("** Generated by: Glass_lines 2017");
            sw.WriteLine("*Preprint, echo=NO, model=NO, history=NO, contact=NO");
        }
        #endregion

        #region "Step2 输出Part"
        /// 写Part部分
        /// <summary>
        /// 输出结果为单元及节点数量：
        /// 0_第1层玻璃最后编号
        /// 1_PVB层最后编号
        /// 2_第2层最后编号
        /// 3_夹丝线最后编号
        /// 4_电极最后编号
        /// 5_单层节点数量
        /// </summary>
        private static int[] Step2_WritePart(string Path, string Mesh_Name, ref StreamWriter sw, ref FEM_Props FEM)
        {
            string t;
            /////输出Head
            sw.WriteLine("**");
            sw.WriteLine("** PARTS");
            sw.WriteLine("**");
            sw.WriteLine("*Part, name=" + Mesh_Name);
            /////输出节点
            int No = Step2_1_WriteNodes(Path, Mesh_Name, ref sw, ref FEM);
            /////输出单元
            int[] ENs = new int[6];    /////各层单元的数量
            int[] Qs = Step2_2_ShellElementsFilter(Path, Mesh_Name);                                   /////存储有原型Shell的：0_总单元个数，1_3节点单元数，2_4节点单元数，3_2节点单元数，4_-3单元数，5_-4单元数
            ENs[0] = Step2_3_WriteSolidElements(No, Qs, 0, 0, Path, Mesh_Name, ref sw);                /////生成第0层Solid单元
            ENs[1] = Step2_3_WriteSolidElements(No, Qs, ENs[0], 1, Path, Mesh_Name, ref sw);           /////生成第1层Solid单元
            ENs[2] = Step2_3_WriteSolidElements(No, Qs, ENs[1], 2, Path, Mesh_Name, ref sw);           /////生成第1层Solid单元
            ENs[3] = Step2_4_WriteWireElements(No, Qs, ENs[2], FEM.Layer_PW, Path, Mesh_Name, ref sw); /////生成夹丝线单元
            ENs[4] = Step2_5_WritePoleElements(No, Qs, ENs[3], FEM.Layer_PW, Path, Mesh_Name, ref sw); /////生成电极单元
            ENs[5] = No;               /////将单层节点数量放在输出数组的最后
            /////输出节点Set
            sw.WriteLine("*Nset, nset=Node_Layer0, generate");
            sw.WriteLine("1," + Convert.ToString(No) + ",1");
            sw.WriteLine("*Nset, nset=Node_Layer1, generate");
            sw.WriteLine(Convert.ToString(No + 1) + "," + Convert.ToString(2 * No) + ",1");
            sw.WriteLine("*Nset, nset=Node_Layer2, generate");
            sw.WriteLine(Convert.ToString(2 * No + 1) + "," + Convert.ToString(3 * No) + ",1");
            sw.WriteLine("*Nset, nset=Node_Layer3, generate");
            sw.WriteLine(Convert.ToString(3 * No + 1) + "," + Convert.ToString(4 * No) + ",1");
            ///所有节点
            sw.WriteLine("*Nset, nset=Node_Whole, generate");
            sw.WriteLine("1," + Convert.ToString(4 * No) + ",1");
            ///高电势节点
            sw.WriteLine("*Nset, nset=Node_PotentH");
            t = Convert.ToString(FEM.Nodes_PotentH[0] + FEM.Layer_PW * No);
            for (int i = 1; i < FEM.Nodes_PotentH.Count; i++)
                t += "," + Convert.ToString(FEM.Nodes_PotentH[i] + FEM.Layer_PW * No);
            sw.WriteLine(t);
            ///低电势节点
            sw.WriteLine("*Nset, nset=Node_PotentL");
            t = Convert.ToString(FEM.Nodes_PotentL[0] + FEM.Layer_PW * No);
            for (int i = 1; i < FEM.Nodes_PotentL.Count; i++)
                t += "," + Convert.ToString(FEM.Nodes_PotentL[i] + FEM.Layer_PW * No);
            sw.WriteLine(t);
            /////输出单元Set
            sw.WriteLine("*Elset, elset=Glass1, generate");
            sw.WriteLine("1," + Convert.ToString(ENs[0]) + ",1");
            sw.WriteLine("*Elset, elset=PVB, generate");
            sw.WriteLine(Convert.ToString(ENs[0] + 1) + "," + Convert.ToString(ENs[1]) + ",1");
            sw.WriteLine("*Elset, elset=Glass2, generate");
            sw.WriteLine(Convert.ToString(ENs[1] + 1) + "," + Convert.ToString(ENs[2]) + ",1");
            sw.WriteLine("*Elset, elset=Wires, generate");
            sw.WriteLine(Convert.ToString(ENs[2] + 1) + "," + Convert.ToString(ENs[3]) + ",1");
            sw.WriteLine("*Elset, elset=Pole, generate");
            sw.WriteLine(Convert.ToString(ENs[3] + 1) + "," + Convert.ToString(ENs[4]) + ",1");
            /////输出Section
            Step2_6_WriteSections(ref sw, ref FEM);
            /////输出Tail
            sw.WriteLine("*End Part");
            sw.WriteLine("**");
            return ENs;
        }

        ///输出节点
        /// <summary>
        /// 输出节点，同时输出4层节点
        /// </summary>
        /// <param name="Path">路径</param>
        /// <param name="Mesh_Name">文件名</param>
        /// <param name="sw">写文件</param>
        /// <param name="Tm">PVB层厚度</param>
        /// <param name="T1">上层玻璃厚度</param>
        /// <param name="T2">下层玻璃厚度</param>
        /// <returns></returns>
        private static int Step2_1_WriteNodes(string Path, string Mesh_Name, ref StreamWriter sw, ref FEM_Props FEM)
        {
            sw.WriteLine("*Node");
            ///第1层节点
            StreamReader sr = new StreamReader(Path + Mesh_Name + ".mesh");
            sr.ReadLine();
            sr.ReadLine();
            sr.ReadLine();
            sr.ReadLine();
            string t = sr.ReadLine();
            string[] t_1;
            int No = 0;
            while (t != "")
            {
                No++;
                t_1 = t.Split('	');
                t_1 = t_1[1].Split(',');
                if (t_1[2] == "2000")
                    FEM.Nodes_PotentH.Add(No);
                else if (t_1[2] == "-2000")
                    FEM.Nodes_PotentL.Add(No);

                t = Convert.ToString(No) + "," + t_1[0] + "," + t_1[1] + ",0.";
                sw.WriteLine(t);
                t = sr.ReadLine();
            }
            sr.Close();
            ///第2层节点
            sr = new StreamReader(Path + Mesh_Name + ".mesh");
            sr.ReadLine();
            sr.ReadLine();
            sr.ReadLine();
            sr.ReadLine();
            string z = "," + Convert.ToString(Math.Round(FEM.Thinck_Glass1, 2));
            for (int i = 1; i <= No; i++)
            {
                t_1 = sr.ReadLine().Split('	');
                t_1 = t_1[1].Split(',');
                t = Convert.ToString(No + i) + "," + t_1[0] + "," + t_1[1] + z;
                sw.WriteLine(t);
            }
            sr.Close();
            ///第3层节点
            sr = new StreamReader(Path + Mesh_Name + ".mesh");
            sr.ReadLine();
            sr.ReadLine();
            sr.ReadLine();
            sr.ReadLine();
            z = "," + Convert.ToString(Math.Round(FEM.Thinck_Glass1 + FEM.Thinck_PVB, 2));
            for (int i = 1; i <= No; i++)
            {
                t_1 = sr.ReadLine().Split('	');
                t_1 = t_1[1].Split(',');
                t = Convert.ToString(2 * No + i) + "," + t_1[0] + "," + t_1[1] + z;
                sw.WriteLine(t);
            }
            sr.Close();
            ///第4层节点
            sr = new StreamReader(Path + Mesh_Name + ".mesh");
            sr.ReadLine();
            sr.ReadLine();
            sr.ReadLine();
            sr.ReadLine();
            z = "," + Convert.ToString(Math.Round(FEM.Thinck_Glass1 + FEM.Thinck_PVB + FEM.Thinck_Glass2, 2));
            for (int i = 1; i <= No; i++)
            {
                t_1 = sr.ReadLine().Split('	');
                t_1 = t_1[1].Split(',');
                t = Convert.ToString(3 * No + i) + "," + t_1[0] + "," + t_1[1] + z; ;
                sw.WriteLine(t);
            }
            sr.Close();
            sr.Dispose();
            return No;
        }

        /// 单元分类
        /// Qs[0]:单元总数
        /// Qs[1]:3节点Shell数量
        /// Qs[2]:4节点Shell数量
        /// Qs[3]:2节点单元数量
        /// Qs[4]:-3单元数量
        /// Qs[5]:-4单元数量
        private static int[] Step2_2_ShellElementsFilter(string Path, string Mesh_Name)
        {
            StreamReader sr = new StreamReader(Path + Mesh_Name + ".mesh");
            StreamWriter sw2 = new StreamWriter(Path + Mesh_Name + ".e2");
            StreamWriter sw3 = new StreamWriter(Path + Mesh_Name + ".e3");
            StreamWriter sw4 = new StreamWriter(Path + Mesh_Name + ".e4");
            StreamWriter swm3 = new StreamWriter(Path + Mesh_Name + ".em3");
            StreamWriter swm4 = new StreamWriter(Path + Mesh_Name + ".em4");
            int[] Qs = new int[6];
            Qs[0] = 0;   /////单元总数
            Qs[1] = 0;   /////3节点Shell数量
            Qs[2] = 0;   /////4节点Shell数量
            Qs[3] = 0;   /////2节点单元数量
            Qs[4] = 0;   /////-3单元数量
            Qs[5] = 0;   /////-4单元数量
            string t = sr.ReadLine();
            string[] t_1;
            int Kind;
            while (t != "")
                t = sr.ReadLine();
            sr.ReadLine();
            sr.ReadLine();
            while (sr.Peek() != -1)
            {
                t = sr.ReadLine();
                t_1 = t.Split('	');
                Kind = Convert.ToInt16(t_1[0]);
                
                if (Kind == 3)     /////3节点单元
                {
                    Qs[1]++;
                    sw3.WriteLine(t_1[1]);
                }
                if (Kind == 4)     /////4节点单元
                {
                    Qs[2]++;
                    sw4.WriteLine(t_1[1]);
                }
                if (Kind == 2)     /////2节点单元
                {
                    Qs[3]++;
                    sw2.WriteLine(t_1[1]);
                }
                if (Kind == -3)     /////-3节点单元
                {
                    Qs[4]++;
                    swm3.WriteLine(t_1[1]);
                }
                if (Kind == -4)     /////-4节点单元
                {
                    Qs[5]++;
                    swm4.WriteLine(t_1[1]);
                }
            }
            Qs[0] = Qs[1] + Qs[2] + Qs[3] + Qs[4] + Qs[5];

            sw3.Close();
            sw3.Dispose();
            sw4.Close();
            sw4.Dispose();
            sw2.Close();
            sw2.Dispose();
            swm3.Close();
            swm3.Dispose();
            swm4.Close();
            swm4.Dispose();
            sr.Close();
            sr.Dispose();
            return Qs;
        }

        ///输出由Shell拉伸而成的Solid单元
        /// <summary>
        /// 输出由Shell拉伸而成的Solid单元
        /// </summary>
        /// <param name="No">每层节点的数量</param>
        /// <param name="Qs">各类型单元数量汇总</param>
        /// <param name="E">之前单元的最后编号</param>
        /// <param name="Layer">该单元所处的层号，取值为0,1,2</param>
        /// <param name="Path">路径</param>
        /// <param name="Mesh_Name">文件名</param>
        /// <param name="sw">写文件工具</param>
        /// <returns></returns>
        private static int Step2_3_WriteSolidElements(int No, int[] Qs, int E, int Layer, string Path, string Mesh_Name, ref StreamWriter sw)
        {
            ///单元分类
            StreamReader sr;
            string t;
            string[] t_1;
            int N1, N2, N3, N4;
            ///三角棱柱单元
            if (Qs[1] > 0)
            {
                sr = new StreamReader(Path + Mesh_Name + ".e3");
                sw.WriteLine("*Element, type=DC3D6");
                while (sr.Peek() != -1)
                {
                    E++;
                    t_1 = sr.ReadLine().Split(',');
                    N1 = Convert.ToInt32(t_1[0]);
                    N2 = Convert.ToInt32(t_1[1]);
                    N3 = Convert.ToInt32(t_1[2]);

                    t = Convert.ToString(E) + ",";
                    t += Convert.ToString(N1 + Layer * No) + "," +
                         Convert.ToString(N2 + Layer * No) + "," +
                         Convert.ToString(N3 + Layer * No) + ",";
                    t += Convert.ToString(N1 + (Layer + 1) * No) + "," +
                         Convert.ToString(N2 + (Layer + 1) * No) + "," +
                         Convert.ToString(N3 + (Layer + 1) * No);
                    sw.WriteLine(t);
                }
                sr.Close();
            }

            ///六面体单元
            if (Qs[2] > 0)
            {
                sr = new StreamReader(Path + Mesh_Name + ".e4");
                sw.WriteLine("*Element, type=DC3D8");
                while (sr.Peek() != -1)
                {
                    E++;
                    t_1 = sr.ReadLine().Split(',');
                    N1 = Convert.ToInt32(t_1[0]);
                    N2 = Convert.ToInt32(t_1[1]);
                    N3 = Convert.ToInt32(t_1[2]);
                    N4 = Convert.ToInt32(t_1[3]);

                    t = Convert.ToString(E) + ",";
                    t += Convert.ToString(N1 + Layer * No) + "," +
                         Convert.ToString(N2 + Layer * No) + "," +
                         Convert.ToString(N3 + Layer * No) + "," +
                         Convert.ToString(N4 + Layer * No) + ",";
                    t += Convert.ToString(N1 + (Layer + 1) * No) + "," +
                         Convert.ToString(N2 + (Layer + 1) * No) + "," +
                         Convert.ToString(N3 + (Layer + 1) * No) + "," +
                         Convert.ToString(N4 + (Layer + 1) * No);
                    sw.WriteLine(t);
                }
                sr.Close();
            }
            return E;
        }

        /// 输出夹丝线单元
        /// <summary>
        /// 输出夹丝线单元
        /// </summary>
        /// <param name="No">单层节点数量</param>
        /// <param name="Qs">各类型单元数量汇总</param>
        /// <param name="E">单元编号</param>
        /// <param name="Layer">单元所在的节点层编号，取0,1,2,3</param>
        /// <param name="Path">路径</param>
        /// <param name="Mesh_Name">文件名</param>
        /// <param name="sw">写文件工具</param>
        private static int Step2_4_WriteWireElements(int No, int[] Qs, int E, int Layer, string Path, string Mesh_Name, ref StreamWriter sw)
        {
            if (Qs[3] > 0)
            {
                string t;
                string[] t_1;
                int N1, N2;
                StreamReader sr = new StreamReader(Path + Mesh_Name + ".e2");
                sw.WriteLine("*Element, type=DC1D2E");
                while (sr.Peek() != -1)
                {
                    E++;
                    t_1 = sr.ReadLine().Split(',');
                    N1 = Convert.ToInt32(t_1[0]);
                    N2 = Convert.ToInt32(t_1[1]);

                    t = Convert.ToString(E) + ",";
                    t += Convert.ToString(N1 + Layer * No) + "," +
                         Convert.ToString(N2 + Layer * No);
                    sw.WriteLine(t);
                }
                sr.Close();
                sr.Dispose();
            }
            return E;
        }

        ///输出电极单元
        /// <summary>
        /// 输出电极单元
        /// </summary>
        /// <param name="No">每层节点的数量</param>
        /// <param name="Qs">各类型单元数量汇总</param>
        /// <param name="E">之前单元的最后编号</param>
        /// <param name="Layer">该单元所处的层号，取值为0,1,2</param>
        /// <param name="Path">路径</param>
        /// <param name="Mesh_Name">文件名</param>
        /// <param name="sw">写文件工具</param>
        /// <returns></returns>
        private static int Step2_5_WritePoleElements(int No, int[] Qs, int E, int Layer, string Path, string Mesh_Name, ref StreamWriter sw)
        {
            ///单元分类
            StreamReader sr;
            string t;
            string[] t_1;
            int N1, N2, N3, N4;
            ///三角形单元
            if (Qs[4] > 0)
            {
                sr = new StreamReader(Path + Mesh_Name + ".em3");
                sw.WriteLine("*Element, type=DC2D3E");
                while (sr.Peek() != -1)
                {
                    E++;
                    t_1 = sr.ReadLine().Split(',');
                    N1 = Convert.ToInt32(t_1[0]);
                    N2 = Convert.ToInt32(t_1[1]);
                    N3 = Convert.ToInt32(t_1[2]);

                    t = Convert.ToString(E) + ",";
                    t += Convert.ToString(N1 + Layer * No) + "," +
                         Convert.ToString(N2 + Layer * No) + "," +
                         Convert.ToString(N3 + Layer * No);
                    sw.WriteLine(t);
                }
                sr.Close();
            }

            ///四边形单元
            if (Qs[5] > 0)
            {
                sr = new StreamReader(Path + Mesh_Name + ".em4");
                sw.WriteLine("*Element, type=DC2D4E");
                while (sr.Peek() != -1)
                {
                    E++;
                    t_1 = sr.ReadLine().Split(',');
                    N1 = Convert.ToInt32(t_1[0]);
                    N2 = Convert.ToInt32(t_1[1]);
                    N3 = Convert.ToInt32(t_1[2]);
                    N4 = Convert.ToInt32(t_1[3]);

                    t = Convert.ToString(E) + ",";
                    t += Convert.ToString(N1 + Layer * No) + "," +
                         Convert.ToString(N2 + Layer * No) + "," +
                         Convert.ToString(N3 + Layer * No) + "," +
                         Convert.ToString(N4 + Layer * No);
                    sw.WriteLine(t);
                }
                sr.Close();
            }
            return E;
        }

        /// 输出Sections
        private static void Step2_6_WriteSections(ref StreamWriter sw, ref FEM_Props FEM)
        {
            /////输出Section
            sw.WriteLine("** Section: Glass1");
            sw.WriteLine("*Solid Section, elset=Glass1, material=" + FEM.Glass.Name);
            sw.WriteLine(",");
            sw.WriteLine("** Section: PVB");
            sw.WriteLine("*Solid Section, elset=PVB, material=" + FEM.PVB.Name);
            sw.WriteLine(",");
            sw.WriteLine("** Section: Glass2");
            sw.WriteLine("*Solid Section, elset=Glass2, material=" + FEM.Glass.Name);
            sw.WriteLine(",");
            sw.WriteLine("** Section: Wires");
            sw.WriteLine("*Solid Section, elset=Wires, material=" + FEM.Wire.Name);
            sw.WriteLine(Convert.ToString(3.1415926 * (FEM.Diameter_Wire / 2) * (FEM.Diameter_Wire / 2)) + ",");
            sw.WriteLine("** Section: Pole");
            sw.WriteLine("*Solid Section, elset=Pole, material=" + FEM.Pole.Name);
            sw.WriteLine(Convert.ToString(FEM.Thinck_Pole) + ",");
        }
        #endregion

        #region "Step3 输出Assembly"
        private static void Step3_WriteAss(string Part_Name, ref StreamWriter sw, ref int[] ENs)
        {
            sw.WriteLine("**");
            sw.WriteLine("** ASSEMBLY");
            sw.WriteLine("**");
            sw.WriteLine("*Assembly, name=Assembly");
            sw.WriteLine("**");
            sw.WriteLine("*Instance, name=" + Part_Name + "-1, part=" + Part_Name);
            sw.WriteLine("*End Instance");
            sw.WriteLine("**");

            Step3_1_AssSets(Part_Name, ref sw, ref ENs);     /////在Ass中创建两个节点Set用于施加边界条件

            sw.WriteLine("*End Assembly");
            sw.WriteLine("**");
        }

        private static void Step3_1_AssSets(string Part_Name, ref StreamWriter sw, ref int[] ENs)
        {
            sw.WriteLine("*Elset, elset=S1_Ele, internal, instance=" + Part_Name + "-1" + ", generate");
            sw.WriteLine("1," + Convert.ToString(ENs[0]) + ",1");

            sw.WriteLine("*Elset, elset=S2_Ele, internal, instance=" + Part_Name + "-1" + ", generate");
            sw.WriteLine(Convert.ToString(ENs[1] + 1) + "," + Convert.ToString(ENs[2]) + ",1");

            sw.WriteLine("*Surface, type=ELEMENT, name=S1");
            sw.WriteLine("S1_Ele, S1");

            sw.WriteLine("*Surface, type=ELEMENT, name=S2");
            sw.WriteLine("S2_Ele, S2");
        }
        #endregion

        #region "Step4 输出材料参数"
        private static void Step4_WriteMat(ref StreamWriter sw,ref FEM_Props FEM)
        {
            FEM.FEM_WriteMat(ref sw);
        }
        #endregion

        #region "Step5 输出常数"
        private static void Step5_WriteIniPara(string Part_Name, ref StreamWriter sw, ref FEM_Props FEM)
        {
            sw.WriteLine("** PHYSICAL CONSTANTS");
            sw.WriteLine("**");
            sw.WriteLine("*Physical Constants, absolute zero=" + Convert.ToString(FEM.Const_AbsZero) 
                          + ", stefan boltzmann=" + Convert.ToString(FEM.Consr_Boltzmann));
            sw.WriteLine("**");

            sw.WriteLine("** PREDEFINED FIELDS");
            sw.WriteLine("** Name: Field_Temp   Type: Temperature");
            sw.WriteLine("*Initial Conditions, type=TEMPERATURE");
            sw.WriteLine(Part_Name + "-1.Node_Whole" + "," + Convert.ToString(FEM.Temper_Envi));
            sw.WriteLine("**");
        }
        #endregion

        #region "Step6 输出Step"
        private static void Step6_WriteStep(string Part_Name, ref StreamWriter sw, ref FEM_Props FEM)
        {
            sw.WriteLine("** ----------------------------------------------------------------");
            sw.WriteLine("**");
            sw.WriteLine("** STEP: Step-1");
            sw.WriteLine("**");
            sw.WriteLine("*Step, name=Step-1, nlgeom=NO");
            sw.WriteLine("*Coupled Thermal-electrical, steady state, deltmx=0.");
            sw.WriteLine("1., 1., 1e-05, 1.,");
            sw.WriteLine("**");
            Step6_1_WriteBC(Part_Name, ref sw, ref FEM);
            Step6_2_WriteInteractions(ref sw, ref FEM);
            Step6_3_WriteOutReq(ref sw);
            sw.WriteLine("*End Step");
        }

        private static void Step6_1_WriteBC(string Part_Name, ref StreamWriter sw, ref FEM_Props FEM)
        {
            sw.WriteLine("** BOUNDARY CONDITIONS");
            sw.WriteLine("**");
            sw.WriteLine("** Name: BC_PotentH Type: Electric potential");
            sw.WriteLine("*Boundary");
            sw.WriteLine(Part_Name + "-1.Node_PotentH" + ", 9, 9," + Convert.ToString(FEM.PotentH));
            sw.WriteLine("** Name: BC_PotentL Type: Electric potential");
            sw.WriteLine("*Boundary");
            sw.WriteLine(Part_Name + "-1.Node_PotentL" + ", 9, 9," + Convert.ToString(FEM.PotentL));
            sw.WriteLine("**");
        }

        private static void Step6_2_WriteInteractions(ref StreamWriter sw, ref FEM_Props FEM)
        {
            sw.WriteLine("** INTERACTIONS");
            sw.WriteLine("** Interaction: Int-Film1");
            sw.WriteLine("*Sfilm");
            sw.WriteLine("S1, F, " + Convert.ToString(FEM.Temper_Envi) + "," + Convert.ToString(FEM.Coef_Film));
            sw.WriteLine("** Interaction: Int-Film2");
            sw.WriteLine("*Sfilm");
            sw.WriteLine("S2, F, " + Convert.ToString(FEM.Temper_Envi) + "," + Convert.ToString(FEM.Coef_Film));

            sw.WriteLine("** Interaction: Int-Radiation1");
            sw.WriteLine("*Sradiate");
            sw.WriteLine("S1, R, " + Convert.ToString(FEM.Temper_Envi) + "," + Convert.ToString(FEM.Coef_Emiss));
            sw.WriteLine("** Interaction: Int-Radiation2");
            sw.WriteLine("*Sradiate");
            sw.WriteLine("S2, R, " + Convert.ToString(FEM.Temper_Envi) + "," + Convert.ToString(FEM.Coef_Emiss));
            sw.WriteLine("**");
        }

        private static void Step6_3_WriteOutReq(ref StreamWriter sw)
        {
            sw.WriteLine("** OUTPUT REQUESTS");
            sw.WriteLine("**");
            sw.WriteLine("*Restart, write, frequency=0");
            sw.WriteLine("**");

            sw.WriteLine("** FIELD OUTPUT: F-Output-1");
            sw.WriteLine("**");
            sw.WriteLine("*Output, field, variable=PRESELECT");
            sw.WriteLine("**");

            sw.WriteLine("** FIELD OUTPUT: F-Output-2");
            sw.WriteLine("**");
            sw.WriteLine("*Output, field");
            sw.WriteLine("*Node Output");
            sw.WriteLine("CECUR, RECUR");
            sw.WriteLine("*Element Output, directions=YES");
            sw.WriteLine("ECD, TEMP");
            sw.WriteLine("*Contact Output");
            sw.WriteLine("ECD,");
            sw.WriteLine("**");

            sw.WriteLine("** HISTORY OUTPUT: H-Output-1");
            sw.WriteLine("**");
            sw.WriteLine("*Output, history, frequency=0");
        }
        #endregion
    }
}
